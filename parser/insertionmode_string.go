// Code generated by "stringer -type=insertionMode"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[initial-0]
	_ = x[beforeHTML-1]
	_ = x[beforeHead-2]
	_ = x[inHead-3]
	_ = x[inHeadNoScript-4]
	_ = x[afterHead-5]
	_ = x[inBody-6]
	_ = x[inBodyPeekNextToken-7]
	_ = x[text-8]
	_ = x[inTable-9]
	_ = x[inTableText-10]
	_ = x[inCaption-11]
	_ = x[inColumnGroup-12]
	_ = x[inTableBody-13]
	_ = x[inRow-14]
	_ = x[inCell-15]
	_ = x[inSelect-16]
	_ = x[inSelectInTable-17]
	_ = x[inTemplate-18]
	_ = x[afterBody-19]
	_ = x[inFrameset-20]
	_ = x[afterFrameset-21]
	_ = x[afterAfterBody-22]
	_ = x[afterAfterFrameset-23]
	_ = x[stopParser-24]
}

const _insertionMode_name = "initialbeforeHTMLbeforeHeadinHeadinHeadNoScriptafterHeadinBodyinBodyPeekNextTokentextinTableinTableTextinCaptioninColumnGroupinTableBodyinRowinCellinSelectinSelectInTableinTemplateafterBodyinFramesetafterFramesetafterAfterBodyafterAfterFramesetstopParser"

var _insertionMode_index = [...]uint8{0, 7, 17, 27, 33, 47, 56, 62, 81, 85, 92, 103, 112, 125, 136, 141, 147, 155, 170, 180, 189, 199, 212, 226, 244, 254}

func (i insertionMode) String() string {
	if i >= insertionMode(len(_insertionMode_index)-1) {
		return "insertionMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _insertionMode_name[_insertionMode_index[i]:_insertionMode_index[i+1]]
}
