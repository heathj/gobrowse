// Code generated by "stringer -type=insertionMode"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[initial-0]
	_ = x[beforeHTML-1]
	_ = x[beforeHead-2]
	_ = x[inHead-3]
	_ = x[inHeadNoScript-4]
	_ = x[afterHead-5]
	_ = x[inBody-6]
	_ = x[text-7]
	_ = x[inTable-8]
	_ = x[inTableText-9]
	_ = x[inCaption-10]
	_ = x[inColumnGroup-11]
	_ = x[inTableBody-12]
	_ = x[inRow-13]
	_ = x[inCell-14]
	_ = x[inSelect-15]
	_ = x[inSelectInTable-16]
	_ = x[inTemplate-17]
	_ = x[afterBody-18]
	_ = x[inFrameset-19]
	_ = x[afterFrameset-20]
	_ = x[afterAfterBody-21]
	_ = x[afterAfterFrameset-22]
	_ = x[stopParser-23]
}

const _insertionMode_name = "initialbeforeHTMLbeforeHeadinHeadinHeadNoScriptafterHeadinBodytextinTableinTableTextinCaptioninColumnGroupinTableBodyinRowinCellinSelectinSelectInTableinTemplateafterBodyinFramesetafterFramesetafterAfterBodyafterAfterFramesetstopParser"

var _insertionMode_index = [...]uint8{0, 7, 17, 27, 33, 47, 56, 62, 66, 73, 84, 93, 106, 117, 122, 128, 136, 151, 161, 170, 180, 193, 207, 225, 235}

func (i insertionMode) String() string {
	if i >= insertionMode(len(_insertionMode_index)-1) {
		return "insertionMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _insertionMode_name[_insertionMode_index[i]:_insertionMode_index[i+1]]
}
